import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

def goVersion = '20.1.2'
def author = 'xiyoo0812'
def repoName = 'gocd-build-watcher-plugin'
def repoDesc = 'A GoCD Notification plugin which sends emails and WebHook messages to team groupÔºÅ'
def repoUrl = "https://github.com/xiyoo0812/$repoName"
def repoTags = ['go', 'go-cd', 'plugin', 'webhook', 'email']

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

dependencies {
  compile 'org.apache.commons:commons-email:1.4'
  compile 'org.apache.commons:commons-lang3:3.5'
  compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '19.2.0'
  compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
  compile group: 'commons-io', name: 'commons-io', version: '2.6'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
  testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
  testCompile 'org.slf4j:slf4j-simple:1.7.22'
}

processResources {
    filter ReplaceTokens, tokens: [
            'plugin.id'          : 'build-watcher.notifier',
            'project.name'       : 'Build-Watcher Notification Plugin',
            'project.description': repoDesc,
            'project.version'    : project.version,
            'repo.url'           : repoUrl.toString(),
            'author'             : author,
            'go.version'         : goVersion
    ]
}

idea {
    module {
        testSourceDirs += file("src/integration/java")
    }
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    testLogging.showStandardStreams = true
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = repoName
        desc = repoDesc
        vcsUrl = "${repoUrl}.git"
        githubRepo = repoUrl.replaceFirst('\\Qhttps://github.com/\\E', '');
        githubReleaseNotesFile = 'README.md'
        licenses = ['Public Domain']
        labels = repoTags
        publicDownloadNumbers = true
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name repoDesc
                url repoUrl
            }
        }
    }
}

task integrationTest(type: Test) {
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task publish(dependsOn: bintrayUpload)